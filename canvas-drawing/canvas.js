document.addEventListener("DOMContentLoaded", (event) => {

    canvas = document.querySelector("canvas");

    body = document.querySelector("body");

    body.style.backgroundColor = "#FFFAFA";

    context = canvas.getContext("2d");                          

    document.fonts.load("50px Berkshire Swash").then( (event) => {
        context.fillStyle = "#800020";
        context.font = "50px Berkshire Swash";
        context.fillText("Chaltin's Canvas Drawing", 20, 50)
        
        context.font = "16px Berkshire Swash";
        context.fillText("Press any key to 'draw' on the canvas. Different keys draw different shapes. Refresh the page to clear the canvas. Have fun!!", 20, 80)
    });

    //All shapes are line drawings. They are not filled with color.
    //Works for most keys. Keys that don't produce a shape include "Shift", "Ctrl", and "Alt." 
    document.addEventListener("keypress", (event) => {

        x = Math.random()*900;
        y = Math.random()*700 + 150; //Added 150 to y-coordinate do shapes can clear the fillText() at the top of the page.
        w = Math.random()*100;
        h = Math.random()*100;
        r = Math.random()*100;
        //I created additinal variables for the x-,y-coordinates of the triangles. Without these, the triangles will be concentrated near (0,0). 
        xTwo = x + Math.random()*100; //Add xTwo to x to create the x-coordinate of the second lineTo() of the triangle.
        yTwo = y + Math.random()*100 + 80; //Add yTwo to y to create the y-coordinate of the second lineTo() of the triangle.
        xThree = x + Math.random()*100; //Add xThree to x to create the x-coordinate of the thrid lineTo() of the triangle.
        yThree = y + Math.random()*100 +80; //Add yThree to y to create the y-coordinate of the third lineTo() of the triangle.
        sqrt = Math.sqrt(Math.pow(xTwo - x, 2) + Math.pow(yTwo - y, 2)); //This will calculate the length of the line generated by a capital letter event.

        //I originally used RGB values for my shapes. For some reason, Chrome displayed all the random colors as black. I changed the random color generator to hex values.
        // r = Math.random()*255
        // g = Math.random()*255
        // b = Math.random()*255
        //context.strokeStyle = "rgb("+r+","+g+","+b+")";

        //The following random hex generator code comes from Paul Irish at https://www.paulirish.com/2009/random-hex-color-code-snippets/
        //The below hex color generator sometime generates an invalid hex code (five characters after the hashtag instead of six). I wrote a function to address that outcome. If an invalid hex code is generated, then the shape will be a fallback color. The fallback color is a light gray.
        hex = '#'+ Math.floor(Math.random()*16777215).toString(16);
        let colorTwo = () => (hex.length === 7) ? hex : "#d3d3d3";

        if (event.key.match(/[a-z]/) && event.key.length === 1) {
            //All lowercase letter keys (a-z) will produce a rectangle. I added a length boolean because I wanted to limit rectangles to single-letter keypress events. Keys such as "Enter" and "Backspace" will produce a circle.
            context.strokeStyle = colorTwo();
            context.strokeRect(x, y, w, h);
            console.log(`Lowercase ${event.key} draws a rectangle.`);
            console.log(`Color is ${colorTwo()}.`);
            console.log(`Coordinates are ${x}, ${y}.`);
            console.log(`Height is ${h} and width is ${w}.`);
        } else if (event.key.match(/[A-Z]/) && event.key.length === 1) {
            //Capital letters will produce a line.
            context.strokeStyle = colorTwo();
            context.beginPath();
            context.moveTo(x, y);
            context.lineTo(xTwo, yTwo); 
            context.stroke(); 
            console.log(`Uppercase ${event.key} draws a line.`);
            console.log(`Color is ${colorTwo()}.`);
            console.log(`Starting coordinates are ${x}, ${y}.`);
            console.log(`Ending coordinates are ${xTwo}, ${yTwo}.`);
            console.log(`Line Length is ${sqrt}.`)
        } else if (event.key.match(/[0-9]/)){
            //All number keys (0-9) will produce a circle.
            context.strokeStyle = colorTwo();
            context.beginPath();
            context.arc(x,y,r,0,2*Math.PI);
            context.stroke();
            console.log(`${event.key} draws a circle.`);
            console.log(`Color is ${colorTwo()}.`);
            console.log(`Coordinates are ${x}, ${y}.`);
            console.log(`Radius is ${r}.`);
        } else {
            // All other keys will produce a triangle. Does not include "Shift", "Ctrl", or "Alt".
            context.strokeStyle = colorTwo();
            context.beginPath();
            context.moveTo(x, y);
            context.lineTo(xTwo, yTwo); 
            context.lineTo(xThree,yThree); 
            context.closePath(); 
            context.stroke(); 
            console.log(`${event.key} draws a triangle.`);
            console.log(`Color is ${colorTwo()}.`);
            console.log(`Starting coordinates are ${x}, ${y}.`);
            console.log(`Second coordinates are ${xTwo}, ${yTwo}.`);
            console.log(`Thrid coordinates are ${xThree}, ${yThree}.`);
        }
        
    });


    
    // Code below is to create a random box based on x,y coordinates of click. I didn't like the way this looked on the screen.
    // document.addEventListener("click", (event) => {

    //     x = event.clientX;
    //     y = event.clientY;
    //     w = Math.random()*100
    //     h = Math.random()*100

    //     r = Math.random()*255
    //     g = Math.random()*255
    //     b = Math.random()*255

    //     context.strokeStyle = "rgb("+r+","+g+","+b+")";
    //     context.strokeRect(x, y, w, h);

    // })
    
});
